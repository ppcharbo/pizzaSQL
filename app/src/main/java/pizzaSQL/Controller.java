/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pizzaSQL;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Scanner;

import pizzaSQL.model.Customer;
import pizzaSQL.model.Ingredients;
import pizzaSQL.model.Item;
import pizzaSQL.model.ItemType;

public class Controller {
	/*
	 * FOR LOGIN:
	 */
	public static final String dbName = "pizza";
	public static final String user = "root";
	public static final String passwd = "dio";
	public static final String URL = "jdbc:mysql://127.0.0.1/" + dbName;

	protected static String customerId = "";
	protected static String customerEmail = "";
	protected static String customerPhone = "";
	protected static String customerPostcode = "";
	protected static Connection conn;

	private Hibernate hibernate;

	public Controller() throws Exception {

		hibernate = new Hibernate(user, passwd, URL);
	}

	public void mainLoop(Boolean showId) throws Exception {

		Scanner s;

		loop: while (true) {
			System.out.println(" ");
			System.out.println("""
					1 - Make an order
					2 - List all available Pizzas
					3 - List all available Drinks
					4 - List all available Desserts
					5 - List of current orders
					6 - Manage Customers
					0 - Exit\s""");
			s = new Scanner(System.in);
			String str = s.nextLine();
			switch (str) {
			case "1":
				makeOrder(s);
				break;
			case "2":
				System.out.println("\n Available pizza \n");
				getListPizza(false);
				break;
			case "3":
				System.out.println("\n Available drinks \n");
				getListDrinks(false);
				break;
			case "4":
				System.out.println("\n Available dessert \n");
				getListDesserts(false);
				break;
			case "5":
				listOfOrder();
				break;

			case "6":
				manageCustomer(s);
				break;
			case "0":
				break loop;
			}
		}
		s.close();
	}

	private void getListDesserts(boolean showId) throws Exception {

		Collection<Item> items = hibernate.findAllDessert();

		for (Item item : items) {

			String id = item.getId();
			String name = item.getName();
			Double price = item.getPrice();

			if (showId)
				System.out.printf("%2s - %-25s  price : %4.2f € \n", id, name, price);
			else
				System.out.printf("%-25s  price : %4.2f € \n", name, price);

		}

	}

	private void getListDrinks(boolean showId) throws Exception {

		Collection<Item> items = hibernate.findAllDrinks();

		for (Item item : items) {

			String id = item.getId();
			String name = item.getName();
			Double price = item.getPrice();

			if (showId)
				System.out.printf("%2s - %-25s  price : %4.2f € \n", id, name, price);
			else
				System.out.printf("%-25s  price : %4.2f € \n", name, price);

		}

	}
	/*
	 * FOR PIZZA
	 */

	private void getListPizza(Boolean showId) throws Exception {

		Collection<Item> items = hibernate.findAllPizza();

		for (Item item : items) {

			String id = item.getId();
			String name = item.getName();
			Double price = item.getPrice();
			Boolean isVeggie = item.isVeggie();
			Collection<Ingredients> ingredients = item.getIngredients();

			String listIng = new String();
			for (Ingredients o : ingredients) {
				listIng += o.getName() + ",";
			}
			StringBuffer sb = new StringBuffer(listIng);
			// invoking the method
			sb.deleteCharAt(sb.length() - 1);
			listIng = new String(sb);

			if (showId)
				System.out.printf("%2s - %-25s  price : %4.2f € veggie : %-3s (%s) \n", id, name, price, isVeggie, listIng);
			else
				System.out.printf("%-25s  price : %4.2f € veggie : %-3s (%s) \n", name, price, isVeggie, listIng);

		}

	}

	private void manageCustomer(Scanner s) throws Exception {

		loop: while (true) {
			System.out.println("\ninside manageCustomer method");
			System.out.println("1 - Create Customer ");
			System.out.println("2 - List All customers ");
			System.out.println("0 - Exit ");

			String str = s.nextLine();
			switch (str) {
			case "1":
				newCustomer(s);
				break;
			case "2":
				listAllCustomer();
				break;
			case "0":
				break loop;
			}

		}

	}

	private void listAllCustomer() throws Exception {
		System.out.println("inside listAllCustomer methd");

		Collection<Customer> list = hibernate.findAllCustomers();

		for (Customer customer : list) {

			Integer id = customer.getId();
			String name = customer.getName();
			String email = customer.getEmail();
			String phone = customer.getPhone();
			;

			System.out.println("[Customer id: " + id + " Name: " + name + " email: " + email + " Phone num: " + phone);

		}

	}

	private Customer newCustomer(Scanner s) throws SQLException {
		System.out.println("inside new Customer methode");
		System.out.println("insert name ");

		String name = s.nextLine();
		System.out.println("insert postal code ");
		Integer postalCode = Integer.valueOf(s.nextLine());
		System.out.println("insert address ");
		String address = s.nextLine();
		System.out.println("insert email ");
		String email = s.nextLine();
		System.out.println("insert phone ");
		String phone = s.nextLine();
		System.out.println("insert a password ");
		String password = s.nextLine();

		Customer co = hibernate.createCustomer(name, postalCode, address, email, phone, password);
		return co;

	}

	private void listOfOrder() {
		System.out.println("inside listOfOrder methd");

	}

	private void makeOrder(Scanner s) throws Exception {

		System.out.println("Welcome , please enter your choices");
		getListPizza(true);
		getListDrinks(true);
		getListDesserts(true);
		Collection<Item> basket = new ArrayList<Item>();
		System.out.println("Type the id of the products you wish to purchase. When you are done, type 'd' ");
		Boolean pizzaInBasket = false;
		while (true) {
			String string = s.nextLine();

			if (string.equals("d")) {
				if (pizzaInBasket) {
					break;
				} else

					System.out.println("You must orther at least one pizza ");
			} else {
				Item item = hibernate.findItemById(string);
				if (item != null) {
					if (item.getItemType() == ItemType.pizza)
						pizzaInBasket = true;
					basket.add(item);
				}
				System.out.println(basket);
				// add item to orders_items
			}
		}

//		Now we must handle the customer
		Customer newCustomer = null;
		loop: while (true) {
			System.out.println("\n Please choose your customer");
			System.out.println("0 - Create Customer ");
			System.out.println("2 - List All customers ");

			String str = s.nextLine();
			switch (str) {
			case "0":
				newCustomer = newCustomer(s);
				break loop;
			case "2":
				listAllCustomer();
				System.out.println("Please enter customer ID");
				Integer id = Integer.valueOf(s.nextLine());
				newCustomer = hibernate.findCustomerById(id);
				if (newCustomer == null) {
					System.err.println("we could not find your id" + id);
				} else
					break loop;
			}

		}

		System.out.println("Please enter your discount code (hit return if you dont have )");

		String discount = s.nextLine();
		if (!discount.equals("")) {
			Boolean duplicated = hibernate.findDiscountDuplicate(discount);
			if (duplicated) {
				System.err.println("Discout code already used ");
				discount = null;
			}
		}

		String newdiscount = generateDiscout(basket);
		if (!newdiscount.equals("-1"))
			System.out.printf("Your discount Code is  %s ", newdiscount);

		completCheckOut(basket, newCustomer, discount);

	}

	private String generateDiscout(Collection<Item> basket) {

		int count = 0;

		for (Item item : basket) {
			if (item.getItemType() == ItemType.pizza)
				count++;
		}
		if (count > 10)

			return RandomString.getAlphaNumericString(4);

		return new String("-1");
	}

	private void completCheckOut(Collection<Item> basket, Customer newCustomer, String discount) throws Exception {
		hibernate.completCheckOut(basket, newCustomer, discount);

	}

	public static void main(String[] args) throws Exception {
		new Controller().mainLoop(false);
	}
}
