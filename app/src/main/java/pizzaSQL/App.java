/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package pizzaSQL;

import java.sql.*;
import java.util.Scanner;

public class App {
	public static final String listAllCustomersSQL = "SELECT * FROM customers";
	public static final String list_pizzasSQL = "SELECT id, name FROM items WHERE items_type_id = '1'";
	public static final String ADD_CUSTOMER = "insert into customers(name,postal_code,adress,email,phone,passwd) values (?,?,?,?,?,?);";
	public static final String getIngredient = "SELECT name,price  FROM ingredients  INNER JOIN pizzas_ingredients  ON pizzas_ingredients.ingredients_id = ingredient.id  WHERE pizzas_ingredient.pizza_id = ?;";
	public static final String deleteCustomerSQL = "DELETE FROM customers WHERE id =";
	public static final String listDrinkSQL = "SELECT id,name, price FROM items WHERE items_type_id = '2'";
	public static final String dessertSQL = "SELECT id,name, price FROM items WHERE items_type_id = '3'";
	public Connection conn;

	protected static int currentCustomerId = 0;

	public void mainLoop() throws Exception {
		Scanner s;
		conn = makeConnection();

		loop: while (true) {

			System.out.println(" ");
			System.out.println("1 - Make an order ");
			System.out.println("2 - List all available Pizzas");
			System.out.println("3 - List all available Drinks");
			System.out.println("4 - List all available Desserts");
			System.out.println("5 - List of current orders ");
			System.out.println("6 - Manage Customers");
			System.out.println("0 - Exit ");
			s = new Scanner(System.in);
			String str = s.nextLine();
			switch (str) {
			case "1":
				makeOrder();
				break;
			case "2":
				listPizza();
				break;
			case "3":
				getListDrinks();
				break;
			case "4":
				getListDesserts();
				break;
			case "5":
				listOfOrder();
				break;
			case "6":
				manageCustomer();
				break;
			case "0":
				break loop;
			}
		}
		s.close();

	}

	/*
	 * FOR PIZZA
	 */
	private void listPizza() throws SQLException {
		System.out.println("inside pizza list methd");
		java.sql.Statement statement = conn.createStatement();

		ResultSet resultPizza = statement.executeQuery(list_pizzasSQL);
		while (resultPizza.next()) {

			String nameOfPizza = resultPizza.getString("name");
			String idOfPizza = resultPizza.getString("id");
			String veggie = isVeggie(idOfPizza) ? "yes" : "no";
			int price = getListPizza(idOfPizza) / 100;
			System.out.printf("%2s - %-25s veggie: %-3s price %4s € \n" + "", idOfPizza, nameOfPizza, veggie, price);
		}

	}

	private boolean isVeggie(String id) throws SQLException {
		java.sql.Statement statement = conn.createStatement();
		String QRY = "SELECT veggie from items_ingredients JOIN ingredients i " + "on i.id = items_ingredients.ingredients_id  WHERE items_id = '" + id + "'";
		ResultSet rs = statement.executeQuery(QRY);
		while (rs.next()) {
			if (rs.getInt("veggie") == 0)
				return false;
		}
		return true;
	}

	private int getListPizza(String id) throws SQLException {
		java.sql.Statement statement = conn.createStatement();
		String QRY = "SELECT price from items_ingredients JOIN ingredients i " + "on i.id = items_ingredients.ingredients_id  WHERE items_id = '" + id + "'";
		ResultSet rs = statement.executeQuery(QRY);
		int price = 0;
		while (rs.next()) {
			price += rs.getInt("price");
		}
		return price;
	}

	/*
	 * FOR DRINKS
	 */
	private void getListDrinks() throws Exception {
		java.sql.Statement statement = conn.createStatement();
		ResultSet rs = statement.executeQuery(listDrinkSQL);
		while (rs.next()) {
			int id = rs.getInt("id");
			String drinkName = rs.getString("name");
			int price = rs.getInt("price");

			System.out.printf("%2s - %-17s  price %4s € \n", id, drinkName, price);
		}
	}

	/*
	 * FOR DESSERTS
	 */
	private void getListDesserts() throws Exception {
		java.sql.Statement statement = conn.createStatement();
		ResultSet rs = statement.executeQuery(dessertSQL);
		while (rs.next()) {
			int id = rs.getInt("id");
			String dessertName = rs.getString("name");
			int price = rs.getInt("price");

			System.out.printf("%2s - %-15s  price %4s € \n", id, dessertName, price);

		}
	}

	public Connection makeConnection() throws ClassNotFoundException {
		Connection conn = null;
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			String url = "jdbc:mysql://127.0.0.1/pizza";
			String user = "root";
			// String password = "tyghbn";
			String password = "dio";

			conn = DriverManager.getConnection(url, user, password);
		} catch (SQLException ex) {
			// handle any errors
			System.out.println("SQLException: " + ex.getMessage());
			System.out.println("SQLState: " + ex.getSQLState());
			System.out.println("VendorError: " + ex.getErrorCode());
		}
		return conn;
	}

	private void manageCustomer() throws Exception {
		Scanner s;
		loop: while (true) {
			System.out.println("inside manageCustomer method");
			System.out.println("1 - Create a new customer");
			System.out.println("2 - Delete Customer ");
			System.out.println("3 - List All customers ");
			System.out.println("0 - Exit ");
			s = new Scanner(System.in);
			String str = s.nextLine();
			switch (str) {
			case "1":
				newCustomer();
				break;
			case "2":
				deleteCustomer();
				break;
			case "3":
				listAllCustomer();
				break;
			case "0":
				break loop;
			}
		}
		s.close();
	}

	private void listAllCustomer() throws SQLException {
		System.out.println("inside listAllCustomer methd");

		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(listAllCustomersSQL);
		while (rs.next()) {

			String id = rs.getString("id");
			String name = rs.getString("name");
			String email = rs.getString("email");
			String phone = rs.getString("phone");

			System.out.println("[Customer id: " + id + " Name: " + name + " email: " + email + "Phone num: " + phone);
		}

	}

	private void deleteCustomer() throws SQLException {
		listAllCustomer();
		System.out.println("Type the id of a customer to delete: ");
		Scanner s = new Scanner(System.in);
		String id = s.nextLine();
		s.close();
		Statement stmt = conn.createStatement();
		stmt.executeQuery((deleteCustomerSQL + id));

	}

	private void newCustomer() throws Exception {
		System.out.println("inside new Customer methode");
		System.out.println("insert name ");
		Scanner s = new Scanner(System.in);
		String name = s.nextLine();
		System.out.println("insert postal code ");
		String postalCode = s.nextLine();
		System.out.println("insert address ");
		String address = s.nextLine();
		System.out.println("insert email ");
		String email = s.nextLine();
		System.out.println("insert phone ");
		String phone = s.nextLine();
		System.out.println("insert a password ");
		String password = s.nextLine();
		s.close();

		createCustomer(conn, name,postalCode, address, email, phone, password);

	}

	public void createCustomer(Connection connection, String name, String postalCode, String address, String email, String phone, String password) throws SQLException {
		PreparedStatement prepareStatement = connection.prepareStatement(ADD_CUSTOMER);

		prepareStatement.setString(1, name);
		prepareStatement.setString(2, postalCode);
		prepareStatement.setString(3, address);
		prepareStatement.setString(4, email);
		prepareStatement.setString(5, phone);
		prepareStatement.setString(6, password);
		prepareStatement.executeUpdate();
	}

	private void listOfIngredient() throws Exception {
		System.out.println("inside listOfIngredient methd");
		System.out.println("what pizza's information do you want ?");

		System.out.println("inside pizza list methd");

		java.sql.Statement statement = conn.createStatement();

		ResultSet resultPizza = statement.executeQuery(list_pizzasSQL);
		while (resultPizza.next()) {

			String nameOfPizza = resultPizza.getString("name");
			String idOfPizza = resultPizza.getString("id");

			System.out.println(idOfPizza + " " + nameOfPizza);
		}
	}

	private void listOfOrder() {
		System.out.println("inside listOfOrder methd");

	}

	private void makeOrder() {
		System.out.println("inside makeOrder methd");

	}

	public static void main(String[] args) throws Exception {
		new App().mainLoop();
	}
}
